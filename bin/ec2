#!/usr/bin/env node
var API = require('../api'),
	AWS = require('aws-sdk'),
	fs = require('fs'),
	path  = require('path'),
	argv = parseArgs();





if (argv.command === 'help') {help()}
if (argv.command === 'configure') {configure()}
else {
	EC2 = require('..');
	ec2 = new EC2({profile: argv.opts['--profile'] || 'default'});
	try {
		ec2[argv.command](argv.params);
	} catch (err) {
		console.log("error: ", err.msg);
	}
}



function help (cmd) {
	var	name,
		usage,
		description,
		options,
		commands,
		output;

	if (typeof cmd !== 'string') {
		output = API;
		output.name = 'ec2';} 
	else {
		if (API.commands[cmd]) {
			output = API.commands[cmd];
			output.name = cmd;
		} else {
			console.log('command ' + cmd  + ' not recognized');
			//console.log('available commands:', Object.keys(API.commands).join(','));
			return;
		}}

	chalk = require('chalk');
	console.log(chalk.bold('NAME:'));
	console.log('   ', output.name, ' - ',
				output.description);
	console.log(chalk.bold('USAGE:'));
	console.log('   ', output.usage);
	console.log();


	if (output.commands) {
		console.log(chalk.bold('COMMANDS:'));
		for (var cmd in output.commands) {
			var command = output.commands[cmd];
			command.name = cmd;
			for (var i = command.name.length; i < 20; i++)
				command.name += ' ';
			console.log(' ', command.name, command.description);
		}}



	if (output.options) {
		console.log(chalk.bold('\nOPTIONS'));
		console.log();
		for (var opt in output.options) {
			var option = output.options[opt];
			var name = opt;
			for (var i = name.length ; i < 20; i++) 
				name += ' ';
			console.log(' ', name, option.description );
		}
	}
	console.log();
	return process.exit(0);}
function parseArgs() {
	argv = {
	   _: process.argv.slice(2),
          opts: {},
          command: 'help',
          params: {}
       };

	for (var i = 0 ; i < argv._.length; i++) {
		var arg = argv._[i];

		if (arg in API.options)
			argv.opts[arg] = argv._[++i];
		else if (arg in API.commands)
			argv.command = arg;
		else if (arg in API.commands[argv.command].parameters) {
			var param = API.commands[argv.command]
						   .parameters[arg];


			argv.params[param.name] = param.type === 'boolean' ? true :
							   param.type === 'csv' ? argv._[++i].split(',') :
							   param.type === 'json' ? JSON.parse(argv._[++i]) :
							   argv._[++i];
		}
	}

	for (var key in API.commands[argv.command].parameters) {
		var param = API.commands[argv.command].parameters[key];
		argv.params[param.name] = argv.params[param.name] || param.default;
	}
	return argv;
}